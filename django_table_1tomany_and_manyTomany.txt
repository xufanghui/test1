django添加1对多，和多对多关系表的方法
1.连接地址
http://blog.csdn.net/shangliuyan/article/details/7497054
2.详情

需要插入的数据表结构如下：
[python] view plaincopy
class UserInfo(models.Model):  
    user_id =models.AutoField(primary_key=True)  
    user_name=models.CharField(max_length=20,unique=True)   
    depart=models.ForeignKey(DepartmentInfo)  
    role=models.ManyToManyField(Role)  
          *注：从上述类中可以看出UserInfo除了一般的表项外，还有有一个外键，和一个多对多的field

插入数据方法如下：
[python] view plaincopy
          
        d1=DepartmentInfo.objects.get(depart_id=1) #  d1表示UserInfo的外键数据  
        r1=Role.objects.get(role_name=role)        #  r1表示UserInfo的多对多数据  
        u1=UserInfo(user_name=name,user_pwd=password,sex=sex,mobileno=mobile,email=email,depart=d1)  
        u1.save()  
        u1.role.add(r1)  
        u1.save()  

总结：
  普通数据项：直接插入
  外键数据项：先获取要插入的外键，然后和普通想一起插入
  多对多数据项：获取要插入的多对多数据项，待表中普通数据项和外键数据项save后，使用.add方法加入

3.查询和删除，修改1对多，及多对多关系表
http://blog.csdn.net/shangliuyan/article/details/7920037
4.详情
一、一对多（外键）
例子：一个作者对应多本书，一本书只有一个作者
model代码：
[python] view plaincopy
class Person(models.Model);  
name = models.CharField('作者姓名', max_length=10)  
age = models.IntegerField('作者年龄')  
  
class Book(models.Model):  
person = models.ForeignKey(Person, related_name='person_book')  
title = models.CharField('书籍名称', max_length=10)  
pubtime = models.DateField('出版时间')  

（一）获取对象方法：
1.从作者出发获取书籍
[python] view plaincopy
person = Person.objects.fiter(你的条件)  
book = person.book_set.all()  

2.从书籍出发获取作者
[python] view plaincopy
p = book.person  

二、多对多
例子：一个作者对应多本书，一本书有多个作者
model代码：
[python] view plaincopy
class Author(models.Model):    
    first_name = models.CharField(max_length=30)    
    last_name = models.CharField(max_length=40)    
    email = models.EmailField()    
        
class Book(models.Model):    
    title = models.CharField(max_length=200)    
    authors = models.ManyToManyField(Author)    

（一）获取对象方法：
1.从书籍出发获取作者
[python] view plaincopy
b = Book.objects.get(id=50)  
b.authors.all()  
b.authors.filter(first_name='Adam')  
2.从作者出发获取书籍


[python] view plaincopy
a = Author.objects.get(id=1)  
a.book_set.all()  
（二）添加对象方法：
[python] view plaincopy
a = Author.objects.get(id=1)  
b = Book.objects.get(id=50)  
b.authors.add(a)  


（三）删除对象对象方法：
[python] view plaincopy
a = Author.objects.get(id=1)  
b = Book.objects.get(id=50)  
b.authors.remove(a) 或者 b.authors.filter(id=1).delete()  
